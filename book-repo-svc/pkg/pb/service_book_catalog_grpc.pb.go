// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service_book_catalog.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookCatalogClient is the client API for BookCatalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookCatalogClient interface {
	CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error)
	GetAllAuthor(ctx context.Context, in *GetAllAuthorRequest, opts ...grpc.CallOption) (*GetAllAuthorResponse, error)
	GetAuthor(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (*GetAuthorResponse, error)
	UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, opts ...grpc.CallOption) (*UpdateAuthorResponse, error)
	DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, opts ...grpc.CallOption) (*DeleteAuthorResponse, error)
	CreatePublisher(ctx context.Context, in *CreatePublisherRequest, opts ...grpc.CallOption) (*CreatePublisherResponse, error)
	GetAllPublisher(ctx context.Context, in *GetAllPublisherRequest, opts ...grpc.CallOption) (*GetAllPublisherResponse, error)
	GetPublisher(ctx context.Context, in *GetPublisherRequest, opts ...grpc.CallOption) (*GetPublisherResponse, error)
	UpdatePublisher(ctx context.Context, in *UpdatePublisherRequest, opts ...grpc.CallOption) (*UpdatePublisherResponse, error)
	DeletePublisher(ctx context.Context, in *DeletePublisherRequest, opts ...grpc.CallOption) (*DeletePublisherResponse, error)
}

type bookCatalogClient struct {
	cc grpc.ClientConnInterface
}

func NewBookCatalogClient(cc grpc.ClientConnInterface) BookCatalogClient {
	return &bookCatalogClient{cc}
}

func (c *bookCatalogClient) CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error) {
	out := new(CreateAuthorResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) GetAllAuthor(ctx context.Context, in *GetAllAuthorRequest, opts ...grpc.CallOption) (*GetAllAuthorResponse, error) {
	out := new(GetAllAuthorResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/GetAllAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) GetAuthor(ctx context.Context, in *GetAuthorRequest, opts ...grpc.CallOption) (*GetAuthorResponse, error) {
	out := new(GetAuthorResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, opts ...grpc.CallOption) (*UpdateAuthorResponse, error) {
	out := new(UpdateAuthorResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, opts ...grpc.CallOption) (*DeleteAuthorResponse, error) {
	out := new(DeleteAuthorResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/DeleteAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) CreatePublisher(ctx context.Context, in *CreatePublisherRequest, opts ...grpc.CallOption) (*CreatePublisherResponse, error) {
	out := new(CreatePublisherResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/CreatePublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) GetAllPublisher(ctx context.Context, in *GetAllPublisherRequest, opts ...grpc.CallOption) (*GetAllPublisherResponse, error) {
	out := new(GetAllPublisherResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/GetAllPublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) GetPublisher(ctx context.Context, in *GetPublisherRequest, opts ...grpc.CallOption) (*GetPublisherResponse, error) {
	out := new(GetPublisherResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/GetPublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) UpdatePublisher(ctx context.Context, in *UpdatePublisherRequest, opts ...grpc.CallOption) (*UpdatePublisherResponse, error) {
	out := new(UpdatePublisherResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/UpdatePublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookCatalogClient) DeletePublisher(ctx context.Context, in *DeletePublisherRequest, opts ...grpc.CallOption) (*DeletePublisherResponse, error) {
	out := new(DeletePublisherResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/DeletePublisher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookCatalogServer is the server API for BookCatalog service.
// All implementations must embed UnimplementedBookCatalogServer
// for forward compatibility
type BookCatalogServer interface {
	CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error)
	GetAllAuthor(context.Context, *GetAllAuthorRequest) (*GetAllAuthorResponse, error)
	GetAuthor(context.Context, *GetAuthorRequest) (*GetAuthorResponse, error)
	UpdateAuthor(context.Context, *UpdateAuthorRequest) (*UpdateAuthorResponse, error)
	DeleteAuthor(context.Context, *DeleteAuthorRequest) (*DeleteAuthorResponse, error)
	CreatePublisher(context.Context, *CreatePublisherRequest) (*CreatePublisherResponse, error)
	GetAllPublisher(context.Context, *GetAllPublisherRequest) (*GetAllPublisherResponse, error)
	GetPublisher(context.Context, *GetPublisherRequest) (*GetPublisherResponse, error)
	UpdatePublisher(context.Context, *UpdatePublisherRequest) (*UpdatePublisherResponse, error)
	DeletePublisher(context.Context, *DeletePublisherRequest) (*DeletePublisherResponse, error)
	mustEmbedUnimplementedBookCatalogServer()
}

// UnimplementedBookCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedBookCatalogServer struct {
}

func (UnimplementedBookCatalogServer) CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedBookCatalogServer) GetAllAuthor(context.Context, *GetAllAuthorRequest) (*GetAllAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAuthor not implemented")
}
func (UnimplementedBookCatalogServer) GetAuthor(context.Context, *GetAuthorRequest) (*GetAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedBookCatalogServer) UpdateAuthor(context.Context, *UpdateAuthorRequest) (*UpdateAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedBookCatalogServer) DeleteAuthor(context.Context, *DeleteAuthorRequest) (*DeleteAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedBookCatalogServer) CreatePublisher(context.Context, *CreatePublisherRequest) (*CreatePublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublisher not implemented")
}
func (UnimplementedBookCatalogServer) GetAllPublisher(context.Context, *GetAllPublisherRequest) (*GetAllPublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPublisher not implemented")
}
func (UnimplementedBookCatalogServer) GetPublisher(context.Context, *GetPublisherRequest) (*GetPublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublisher not implemented")
}
func (UnimplementedBookCatalogServer) UpdatePublisher(context.Context, *UpdatePublisherRequest) (*UpdatePublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublisher not implemented")
}
func (UnimplementedBookCatalogServer) DeletePublisher(context.Context, *DeletePublisherRequest) (*DeletePublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublisher not implemented")
}
func (UnimplementedBookCatalogServer) mustEmbedUnimplementedBookCatalogServer() {}

// UnsafeBookCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookCatalogServer will
// result in compilation errors.
type UnsafeBookCatalogServer interface {
	mustEmbedUnimplementedBookCatalogServer()
}

func RegisterBookCatalogServer(s grpc.ServiceRegistrar, srv BookCatalogServer) {
	s.RegisterService(&BookCatalog_ServiceDesc, srv)
}

func _BookCatalog_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).CreateAuthor(ctx, req.(*CreateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_GetAllAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).GetAllAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/GetAllAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).GetAllAuthor(ctx, req.(*GetAllAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).GetAuthor(ctx, req.(*GetAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).UpdateAuthor(ctx, req.(*UpdateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/DeleteAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).DeleteAuthor(ctx, req.(*DeleteAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_CreatePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).CreatePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/CreatePublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).CreatePublisher(ctx, req.(*CreatePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_GetAllPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).GetAllPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/GetAllPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).GetAllPublisher(ctx, req.(*GetAllPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_GetPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).GetPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/GetPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).GetPublisher(ctx, req.(*GetPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_UpdatePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).UpdatePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/UpdatePublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).UpdatePublisher(ctx, req.(*UpdatePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookCatalog_DeletePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).DeletePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/DeletePublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).DeletePublisher(ctx, req.(*DeletePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookCatalog_ServiceDesc is the grpc.ServiceDesc for BookCatalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookCatalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BookCatalog",
	HandlerType: (*BookCatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthor",
			Handler:    _BookCatalog_CreateAuthor_Handler,
		},
		{
			MethodName: "GetAllAuthor",
			Handler:    _BookCatalog_GetAllAuthor_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _BookCatalog_GetAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _BookCatalog_UpdateAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _BookCatalog_DeleteAuthor_Handler,
		},
		{
			MethodName: "CreatePublisher",
			Handler:    _BookCatalog_CreatePublisher_Handler,
		},
		{
			MethodName: "GetAllPublisher",
			Handler:    _BookCatalog_GetAllPublisher_Handler,
		},
		{
			MethodName: "GetPublisher",
			Handler:    _BookCatalog_GetPublisher_Handler,
		},
		{
			MethodName: "UpdatePublisher",
			Handler:    _BookCatalog_UpdatePublisher_Handler,
		},
		{
			MethodName: "DeletePublisher",
			Handler:    _BookCatalog_DeletePublisher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_book_catalog.proto",
}
