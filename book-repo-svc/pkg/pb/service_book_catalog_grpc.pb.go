// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service_book_catalog.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookCatalogClient is the client API for BookCatalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookCatalogClient interface {
	CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error)
}

type bookCatalogClient struct {
	cc grpc.ClientConnInterface
}

func NewBookCatalogClient(cc grpc.ClientConnInterface) BookCatalogClient {
	return &bookCatalogClient{cc}
}

func (c *bookCatalogClient) CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error) {
	out := new(CreateAuthorResponse)
	err := c.cc.Invoke(ctx, "/pb.BookCatalog/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookCatalogServer is the server API for BookCatalog service.
// All implementations must embed UnimplementedBookCatalogServer
// for forward compatibility
type BookCatalogServer interface {
	CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error)
	mustEmbedUnimplementedBookCatalogServer()
}

// UnimplementedBookCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedBookCatalogServer struct {
}

func (UnimplementedBookCatalogServer) CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedBookCatalogServer) mustEmbedUnimplementedBookCatalogServer() {}

// UnsafeBookCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookCatalogServer will
// result in compilation errors.
type UnsafeBookCatalogServer interface {
	mustEmbedUnimplementedBookCatalogServer()
}

func RegisterBookCatalogServer(s grpc.ServiceRegistrar, srv BookCatalogServer) {
	s.RegisterService(&BookCatalog_ServiceDesc, srv)
}

func _BookCatalog_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookCatalogServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BookCatalog/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookCatalogServer).CreateAuthor(ctx, req.(*CreateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookCatalog_ServiceDesc is the grpc.ServiceDesc for BookCatalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookCatalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BookCatalog",
	HandlerType: (*BookCatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthor",
			Handler:    _BookCatalog_CreateAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_book_catalog.proto",
}
